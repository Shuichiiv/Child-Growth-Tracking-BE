// <auto-generated />
using System;
using DataObjects_BE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataObjects_BE.Migrations
{
    [DbContext(typeof(SWP391G3DbContext))]
    [Migration("20250311160245_AddPaymentTablev2")]
    partial class AddPaymentTablev2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataObjects_BE.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Child", b =>
                {
                    b.Property<Guid>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("Childs");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Doctor", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("HospitalAddressWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeedbackContentRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackContentResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedbackCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FeedbackIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("FeedbackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedbackUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeedbackId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ReportId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ManagerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Parent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParentId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("ServiceOrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ProductList", b =>
                {
                    b.Property<Guid>("ProductListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaxAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinAge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("RecommendedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyFeature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductListId");

                    b.ToTable("ProductLists");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.HasKey("RatingId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("ParentId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportIsActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReprotCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ReportId");

                    b.HasIndex("ChildId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ReportProduct", b =>
                {
                    b.Property<Guid>("ReportProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportProductId");

                    b.HasIndex("ProductListId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportProducts");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ServiceCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ServiceDuration")
                        .HasColumnType("real");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ServiceOrder", b =>
                {
                    b.Property<Guid>("ServiceOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("ServiceOrderId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Appointment", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId");

                    b.HasOne("DataObjects_BE.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataObjects_BE.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Doctor");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Child", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Parent", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Doctor", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Account", "Account")
                        .WithOne("Doctor")
                        .HasForeignKey("DataObjects_BE.Entities.Doctor", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Feedback", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Doctor", "Doctor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataObjects_BE.Entities.Report", "Report")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Manager", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Account", "Account")
                        .WithOne("Manager")
                        .HasForeignKey("DataObjects_BE.Entities.Manager", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Parent", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Account", "Account")
                        .WithOne("Parent")
                        .HasForeignKey("DataObjects_BE.Entities.Parent", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Payment", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.ServiceOrder", "ServiceOrder")
                        .WithMany()
                        .HasForeignKey("ServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Rating", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Feedback", "Feedback")
                        .WithMany("Ratings")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataObjects_BE.Entities.Parent", "Parent")
                        .WithMany("Ratings")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Report", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Child", "Child")
                        .WithMany("Reports")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ReportProduct", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.ProductList", "ProductList")
                        .WithMany("ReportProducts")
                        .HasForeignKey("ProductListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataObjects_BE.Entities.Report", "Report")
                        .WithMany("ReportProducts")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductList");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ServiceOrder", b =>
                {
                    b.HasOne("DataObjects_BE.Entities.Parent", "Parent")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataObjects_BE.Entities.Service", "Service")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Account", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Parent")
                        .IsRequired();
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Child", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Doctor", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Feedback", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Parent", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Ratings");

                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.ProductList", b =>
                {
                    b.Navigation("ReportProducts");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Report", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("ReportProducts");
                });

            modelBuilder.Entity("DataObjects_BE.Entities.Service", b =>
                {
                    b.Navigation("ServiceOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
